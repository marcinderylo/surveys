<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   width="100%"
		   height="100%"
		   creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.ToolTipEvent;

			import org.adaptiveplatform.surveys.application.ApplicationContextHolder;
			import org.adaptiveplatform.surveys.application.BusinessExceptionHandler;
			import org.adaptiveplatform.surveys.application.ViewController;
			import org.adaptiveplatform.surveys.application.generated.EvaluationDao;
			import org.adaptiveplatform.surveys.dto.generated.ResearchDto;
			import org.adaptiveplatform.surveys.dto.generated.ResearchesQuery;
			import org.adaptiveplatform.surveys.view.components.ToolTipResearchDetails;
			[Bindable]
			private var researches:ArrayCollection;

			private var evaluationDao:EvaluationDao;

			[Bindable]
			private var researchQuery:ResearchesQuery;

			private var tooltipData:Object;

			private var views:ViewController;

			private function onCreationComplete():void {
				views=ApplicationContextHolder.context.view;
				evaluationDao=ApplicationContextHolder.context.service.evaluationDao;
				researchList.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, toolTipResearchCreateHandler, false, 0, true);
			}

			public function initializeView():void {
				researchQuery=new ResearchesQuery();
				findResearch();
			}

			protected function findResearch():void {
				evaluationDao.queryResearches(researchQuery) //
					.onSuccess(function(result:ArrayCollection):void {
						researches=result;
					}).onFault(BusinessExceptionHandler.displayAlert());
			}

			private function resetResearch():void {
				researchQuery=new ResearchesQuery();
				researches=new ArrayCollection();
				findResearch();
			}

			private function gotoCreateResearch():void {
				views.goto(View.RESEARCH_WIZZARD);
			}

			private function removeResearch():void {

			}

			private function evaluateResearch(e:Event=null):void {
				if (researchList.selectedItem)
					views.goto(View.SURVEY_PUBLICATION_DETAILS, researchList.selectedItem);
			}
			
			private function exit():void{
				ApplicationContextHolder.context.view.goto(View.EVALUATOR_START_PAGE);
			}

			private function toolTipResearchCreateHandler(ev:ToolTipEvent):void {
				var tooltip:ToolTipResearchDetails=new ToolTipResearchDetails();
				tooltip.details=tooltipData;
				ev.toolTip=tooltip;
			}

			private function createToolTip(event:ListEvent, grid:DataGrid):void {
				tooltipData=event.itemRenderer.data;
				grid.toolTip=" ";
				grid.dispatchEvent(new ToolTipEvent(ToolTipEvent.TOOL_TIP_CREATE));
			}

			private function deleteToolTip(event:ListEvent, grid:DataGrid):void {
				grid.toolTip=null;
			}

            private function displayStatus(r:ResearchDto, col:Object):String {
                if (r.status)
                    return resourceManager.getString('adaptive', 'org.adaptiveplatform.surveys.dto.generated.FillingStatusEnum.' + r.status.name);
                return "";
            }
		]]>
	</mx:Script>
	<mx:VBox height="100%"
			 width="100%"
			 verticalScrollPolicy="off"
			 horizontalScrollPolicy="off"
			 id="researchContainer">
		<mx:HBox verticalAlign="middle"
				 width="100%">
			<mx:Label text="{resourceManager.getString('adaptive', 'RESEARCHES')}"
					  width="100%"
					  textAlign="center"/>
			<mx:Button label="{resourceManager.getString('adaptive', 'removeResearch')}"
					   toolTip="{resourceManager.getString('adaptive', 'removeResearchTooltip')}"
					   click="removeResearch()"
					   icon="@Embed(source='/assets/icons/remove.png')"
					   visible="false"/>
			<mx:Button label="{resourceManager.getString('adaptive', 'createResearch')}"
					   toolTip="{resourceManager.getString('adaptive', 'createResearchTooltip')}"
					   click="gotoCreateResearch()"
					   icon="@Embed(source='/assets/icons/add.png')"/>
			<mx:Button label="{resourceManager.getString('adaptive', 'evaluateResearch')}"
					   toolTip="{resourceManager.getString('adaptive', 'evaluateResearchTooltip')}"
					   click="evaluateResearch()"
					   icon="@Embed(source='/assets/icons/evaluator.png')"/>
			<mx:Button toolTip="{resourceManager.getString('adaptive', 'btn.exit')}"
					   label="{resourceManager.getString('adaptive', 'btn.exit')}"
					   click="exit()" />
		</mx:HBox>
		<mx:ApplicationControlBar width="100%">
			<mx:Label text="{resourceManager.getString('adaptive', 'search')}:"/>
			<mx:TextInput id="cbxKeyword"
						  width="100%"
						  text="{researchQuery.name}"
						  change="{researchQuery.name=cbxKeyword.text}"
						  enter="findResearch()"/>
			<mx:Button label="{resourceManager.getString('adaptive', 'find')}"
					   toolTip="{resourceManager.getString('adaptive', 'find')}"
					   icon="@Embed(source='/assets/icons/search.png')"
					   click="findResearch()"/>
			<mx:Button toolTip="{resourceManager.getString('adaptive', 'reset')}"
					   label="{resourceManager.getString('adaptive', 'reset')}"
					   icon="@Embed(source='/assets/icons/clear.png')"
					   click="resetResearch()"/>
		</mx:ApplicationControlBar>
		<mx:DataGrid id="researchList"
					 width="100%"
					 height="100%"
					 dataProvider="{researches}"
					 draggableColumns="false"
					 rowHeight="26"
					 sortableColumns="true"
					 itemRollOut="deleteToolTip(event, researchList)"
					 itemRollOver="createToolTip(event, researchList)"
					 doubleClickEnabled="true"
					 doubleClick="evaluateResearch()">
			<mx:columns>
				<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'researchName')}"
								   dataField="name"/>
				<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'status')}"
								   labelFunction="displayStatus"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:Canvas>
